#! /usr/bin/env perl
use strict;
use warnings;
use integer;
use Pod::Usage;
use Getopt::Long;
use File::Find;
use File::Spec;
use Cwd 'abs_path';

sub version {
	print "find_cruft 2.1\n";
	exit(0)
}

=head1 NAME

find_cruft - find cruft files on Gentoo and similar distributions

=head1 SYNOPSIS

=over 8

=item B<plrep> [options] I<directory1> I<directory2> ...

Scan for cruft files in I<directory1>, I<directory2>, ...

=back

To get an extended help, type B<plrep --man> or B<plrep -?>

=head1 DESCRIPTION

Gentoo records all installed files in a database.
Files not stored in this database are either manually installed or
intentionally created at runtime or cruft.
find_cruft will output all files from the directories passed in the arguments
(or of subdirectories thereof) which are not recorded in the database and
which are not obviously intentionally created files, i.e. all files which are
possibly considered as cruft.

Typically you will want to call with B</> as argument to get all cruft files.
However, you might also want to use e.g. B</usr/lib/python*> or
B</usr/lib/perl*> to find only those files which were created in this
directory (e.g. by B<perl-cleaner>) without being recorded to portage's
database and which might possibly need extra care after updating perl.

Using configuration files (in perl) you have the possibility to say that
certain symbolic links should be followed or that certain directories or
files should be cut and not be treated as cruft even if it appears so.

You also have the possibility to specify a separate root directory which
can save you from using chroot when you have a chroot installation fo Gentoo.
When using that option, the new root is implicitly prepended to the
passed arguments.

Use the B<-vv> option to see what is actually passed.

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Display brief help.

=item B<--man> or B<-?>

Display extended help as a manpage.

=item B<--verbose> or B<-v> (accumulative)

Verbose output.
Specifying several times makes output even more verbose.
More precisely:

=over 8

=item B<-v>
outputs the parsed configuration files.

=item B<-vv>
outputs in addition B<$root> and the parsed arguments

=item B<-vvv>
outputs in addition the data defined in the configuration files.

=back

These additional informations are sent to B<STDERR> unless you use an
option to specify an output file in which case they are sent to B<STDOUT>.

=item B<--version> or B<-V>

Print version number and exit

=item B<--root>[B<=>I<dir>] or B<-r> I<dir>

Prefix I<dir> to most directories to behave similar as to B<chroot> I<dir>.
In particular, I<dir> is automatically prepended to the directories which
you pass as arguments.
The idea is that this should save you a B<chroot> if you want to access
a chroot-installation of Gentoo.
However, this will not always give the desired results (since e.g. absolute
symlinks are not always be treated correctly), so you should be sceptical
whether the cruft list is correct: There may be false positives and negatives.

=item B<--cfg>[B<=>I<config-file>] or B<-c> I<config-file>

Use I<config-file> as an additional configuration file.
This can be used repeatedly.

=item B<--nocfg> or B<-C>

Clear previous (and default) list of configuration files.

=item B<--output>[B<=>I<output-file>] or B<-o> I<output-file>

Append to I<output-file> instead of writing to stdout.
If I<output-file> does not exist, it is created.
If I<output-file> is empty, stdout is used anyway.

=item B<--Output>[B<=>I<output-file>] or B<-O> I<output-file>

As B<--output> but truncate (clobber) I<output-file> if it exists.

=item B<-->

Last option

=back

=head1 CONFIG FILES

The default config-files are (read in this order):

=over 8

=item F<$/etc/find_cruft.pl>

=item F<$$/etc/find_cruft.d/*.pl>

=item F<~/.find_cruft.pl>

=back

The magic beginning B<$> means the value specified in B<--root>,
and the magic beginning B<$$> means in addition that all *.pl files in this
directory are read recursively in alphabetical order.
The magic beginning B<//> (not used in the defaults) is as B<$$> but
ignoring B<--root>.
Further files can be added with the B<--cfg> option.
The list can be cleaned up with the B<--nocfg> option.

The config-files can be any valid perl code.
They are run in the B<CFG::> namespace.
They get passed the following arrays with some default values,
and their purpose is to enlarge these arrays to match the local system.
(They can also shrink these arrays, of course, if the user wants to
get reported files in certain directories as cruft.)

=over 8

=item B<@cut>
Contains files/directories which should be cut recursively.
The entries must be the full paths (without reflecting B<--root>);
no wildcards are allowed.
Undefined or Empty entries are ignored, and redundant B</> symbols in
entries are automatically removed.
Increasing this list (even dramatically) has almost no influence on the speed.

=item B<@cutre>
This is similar as B<@cut> with the difference that the entries of this
list are considered as (perl) regular expressions.
The entries can be strings or compiled regular expressions.
Strings will automatically be compiled as a regular expression without flags.
Increase this list sparingly since every file in your tree is matched against
every entry in this list!

=item B<@cutexceptions>
This is in a sense the opposite to B<@cutre>, i.e. files matching B<@cut>
or B<@cutre> must B<not> match against the regular expressions of this list,
or otherwise the effect of B<@cut>/B<@cutre> is ignored.

=item B<@symlinks>
This array consists of entries of the form
['I<link1>', 'I<link2>', ..., 'I<directory>']
It means that in the database the path beginnings I<link1> of I<link2>
correspond due to symlinks to files in I<directory>.
Only absolute paths are allowed.
The directory B<$root>I<directory> must indeed exist and not contain any
symlink in a path component or the entry is ignored.
(In constrast, I<link1>, I<link2>, ... need not exist to allow that they are
removed later after an emerge.)
If there are several symlink combinations used, you must list them all here;
there is intentionally no algorithm which creates combinations since this
can lead to huge or even endless loops while most combinations are actually
not necessary.
It is not really bad if you forget to add a symlink here: The only negative
effect is that files installed by ebuilds into the symlink instead of the
directory will be reported as cruft, so you just see your mistake from
the output list and can fix it (or live with the false positives).

=item B<@follow>
Contains symlinks which should be followed when getting the file tree.
This should be used if certain parts of your tree lie e.g. on another file
system to which you refer by symbolic links.
The entries must be the full paths (without B<--root>); no wildcards.
Increasing this list even dramatically has almost no influence on the speed
(except that the list of processed files will increase, of course.)

=back

The B<--root> path is accessible as B<$root> (i.e. B<$CFG::root>).
Note that you can use perl's B<push()> to append to an existing array.
Two further helper functions are defined:

=over 8

=item B<remove_root(>I<string>B<)>

This will return I<string>, but if I<string> starts with B<$root>
this part is removed.
This is usuful e.g. if you resolve symlinks with B<Cwd::abs_path> and do not
know whether the result points to a subdirectory of B<$root>

=item B<push_without_root(>I<@array>B<, >I<list>B<)>

This function is like B<push()> except that B<remove_root> is applied to all
pushed arguments and except that undefined or empty strings are not pushed.

=back

For examples, we mainly refer to the default F</etc/find_cruft.pl>.
Anyway, here are some typical examples:

=over 8

=item B<push(@cut, '/dev', '/proc', '/sys', '/run', '/media', '/mnt', '/tmp');>

The above directories are the default in B<@cut>: You need not add them.
The reason for this default is that it usually never makes sense
(and can even cause problems) trying to scan these directories.
Remove them from B<@cut> only if you know what you are doing!

=item B<push(@cut, '/home', '/root', '/srv', '/boot', '/var/tmp',>

=item B<  '/var/db', '/var/cache/edb');>

On most gentoo systems you will never want to consider stuff in these
directories never as cruft.
Therefore, these directories (and some more) are added to B<@cut> by
the default F</etc/find_cruft.pl>.

=item B<push(@cut, '/var/cache/fontconfig', '/usr/share/mime',>

=item B<  '/lib/modules', '/lib64/modules', '/var/log/portage', '/usr/local');>

The above directories usually contain a lot of false positives which you might
want to suppress in the output unless you do a very rigorous cleanup.
However, since in a sense all these directories are cruft, they are not
contained in the default setting (also not in F</etc/find_cruft.pl>).
Therefore you might want to put this into F</etc/find_cruft.d/99-local.pl>).

=item B<push(@cut, '/etc/find_cruft.d/99-local.pl');>

If you always want to suppress the output of that file.

=item B<push(@cutre, '/\.keep[^/]*$', qr!/joe[^/]*$!i);>

Files/dirs with names F<.keep*>, F<joe*>, F<Joe*>, F<JOE*>, ... are ignored.

=item B<push(@cutexceptions, '^/\.keep$', qr!/jOe[^/]*$!);>

The path B</.keep> (in the B<--root> directory) and the filenames B<jOe*>
are exceptions from the above general rules in B<@cutre>.

=item B<push(@symlinks, ['/usr/X11', '/usr/X11/X11', '/usr']);>

Use this if you have a very old Gentoo installations with a symlink from
B</usr/X11> to B</usr>.
This  means that if an ebuild had installed into B</usr/X11> or
B</usr/X11/X11> or into B</usr/X11/X11/X11> or ... it actually installed into
B</usr>, and so the corresponding file in B</usr> is actually not cruft.
Note that in theory the list of admissible directories is infinitely long,
but in practice, there will probably not even be an ebuild which installs
into B</usr/X11/X11/X11> so that it is reasonable to consider only the
first two cases as symlinks.
Probably even the second entry B</usr/X11/X11> is not necessary in practice
(unless you have strange ebuilds from some overlays).
However, recently new ebuilds will never install into B</usr/X11> so that
usually the above customization is not necessary.

=item B<push(@follow, '/etc', '/usr/share/texmf-dist');>

Put such things into B</etc/find_cruft.local.pl> if on you machine
F</etc> and F</usr/share/texmf-dist> are symlinks to e.g. separate partitions.

=back

=head1 COPYRIGHT AND LICENSE

Copyright Martin VE<auml>th.
This program is under the BSD License.

=head1 AUTHOR

Martin VE<auml>th E<lt>martin@mvath.deE<gt>

=cut

# Default for the Options:

my @configs = (
	'$/etc/find_cruft.pl',
	'$$/etc/find_cruft.d',
	'~/.find_cruft.pl'
);
my $outputfile = '';
my $openmode = '>>';
my $verbose = 0;
our $root = '';

# Parse Options:

$Getopt::Long::bundling = 1;
GetOptions(
	'help|h', sub { pod2usage(1) },
	'man|?', sub { pod2usage(-verbose => 2) },
	'version|V', \&version,
	'outputfile|o', sub { $outputfile = $_[1]; $openmode = '>>' },
	'Outputfile|O', sub { $outputfile = $_[1]; $openmode = '>' },
	'root|r=s', \$root,
	'cfg|c=s', \@configs,
	'nocfg|C', sub { @configs = () },
	'verbose|v+', \$verbose,
) or pod2usage(2);

pod2usage(2) unless(scalar(@ARGV));

# Sanitize parsed variables:

$root = abs_path($root) unless($root eq '');
$root =~ s/\/$//;

# Append $root to parsed arguments:

for my $dir (@ARGV) {
	if($dir =~ /^\//) {
		$dir = $root . $dir unless($root eq '')
	}
	$dir = abs_path($dir);
	&fatal("$dir is not a directory") unless(-d $dir)
}

# Output results of parsing arguments and configs:

&verbose('', 1);
&verbose('$root: ' . $root . "\n", 1) unless($root eq '');
&verbose(['ARGV', \@ARGV], 1);

# Global variables;

my $fh = undef;
my $home = $ENV{'HOME'};
my %skip = ();
my %valid_types = ();
my $rootdir = File::Spec->rootdir();

# The default Config:
{
	package CFG;
	our $root = $::root;
	our @cut = (
		'/dev',
		'/proc',
		'/sys',
		'/run',
		'/media',
		'/mnt',
		'/tmp');
	our @cutre = ();
	our @cutexceptions = ();
	our @follow = ();
	our @symlinks = ();
	sub remove_root($) {
		my ($string) = @_;
		return '' unless(defined($string));
		return (($root ne substr($string, 0, length($root))) ?
			$string : substr($string, length($root)))
	}
	sub push_without_root(\@@) {
		my ($array, @rest) = @_;
		for my $i (@rest) {
			my $j = remove_root($i);
			push(@$array, $j) unless($j eq '')
		}
	}
}

# Read config files:

&read_cfg;

# transform configuration data:

my %cut = ();
my %follow = ();
my @symlinks = ();
my @cutre = ();
my @cutexceptions = ();
&transform(\@CFG::cut, \%cut);
&transform(\@CFG::follow, \%follow);
&compile_re(\@CFG::cutre, \@cutre);
&compile_re(\@CFG::cutexceptions, \@cutexceptions);
&prepare_symlinks(\@CFG::symlinks, \@symlinks);

# Output result of config files

&verbose('', 2);
&verbose(['follow', \%follow], 2);
&verbose(['cut', \%cut], 2);
&verbose(['cutre', \@cutre], 2);
&verbose(['cutexceptions', \@cutexceptions], 2);
&verbose(['symlinks', \@symlinks], 2);

# Files owned by portage are no cruft:

&fill_skip;

# Process filesystem:

if($outputfile ne '') {
	open($fh, $openmode, $outputfile) or
		&fatal("cannot open $openmode$outputfile: $!");
	&process_dirs(\@ARGV);
	close($fh)
} else {
	&process_dirs(\@ARGV)
}

#
# Functions
#

# Output fatal error and die:

sub fatal {
	print(STDERR 'fatal: ', $_[0], "\n");
	exit(1)
}

# Output verbose information:
# First argument: string or ['name', \@array ] or ['name', \%hash ]
# Second argument: minimal $verbose level (0 if not specified)

sub verbose {
	return if(($verbose == 0) || ((scalar(@_) >= 2) && ($verbose <= $_[1])));
	my $data = scalar(@_) ? $_[0] : '';
	unless(ref($data) eq 'ARRAY') {
		if($outputfile) {
			print($data, "\n")
		} else {
			print(STDERR $data, "\n")
		}
		return
	}
	my ($title, $ref) = @$data;
	if(ref($ref) eq 'ARRAY') {
		return unless(scalar(@$ref));
		&verbose('@' . $title . ':');
		for my $i (@$ref) {
			if(ref($i) ne 'ARRAY') {
				&verbose($i)
			} else {
				my $s = '[';
				my $last = scalar(@$i) - 1;
				for(my $j = 0; $j < $last; ++$j) {
					$s .= $i->[$j];
					$s .= ', '
				}
				&verbose($s . $i->[$last] . ']')
			}
		}
		&verbose();
		return
	}
	if(ref($ref) eq 'HASH') {
		return unless(scalar(%$ref));
		&verbose('@' . $title . ':');
		for my $i (sort(keys(%$ref))) {
			&verbose($i)
		}
		&verbose();
		return
	}
}

# return normalized \$filename (but keeping /../ for symlinks)

sub normalized {
	my $res = File::Spec->canonpath($_[0]);
	return (($res eq '') ? $rootdir : $res)
}

# Transform \@array into \%hash of undef values; normalized entries:

sub transform {
	my ($array, $hash) = @_;
	for my $i (@$array) {
		next unless(defined($i) && ($i ne ''));
		$i = &normalized($i);
		${$hash}{$i} = undef;
	}
	@$array = ();
}

# Compile all regular expresssions from \@array into \@output if not compiled:

sub compile_re {
	my ($array, $output) = @_;
	for my $i (@$array) {
		next unless(defined($i));
		if(ref($i) eq 'Regexp') {
			push(@$output, $i)
		} elsif($i ne '') {
			push(@$output, qr/$i/)
		}
	}
	@$array = ();
}

# Transform \@symlinks into \@output; normalized entries:

sub prepare_symlinks {
	my ($array, $output) = @_;
	for my $i (@$array) {
		next unless(defined($i) && (ref($i) eq 'ARRAY'));
		my $r = [];
		my $last = scalar(@$i) - 1;
		for(my $j = 0; $j <= $last; ++$j) {
			my $s = $i->[$j];
			next unless(defined($s) && File::Spec->file_name_is_absolute($s));
			$s = &normalized($s);
			if($j < $last) {
				push(@$r, $s)
			} elsif(scalar($r)) {
				my $dest = $root . $s;
				if((-d $dest) && (abs_path($dest) eq $dest)) {
					# destination is dir without symlinks
					push(@$r, $s);
					push(@$output, $r)
				}
			}
		}
	}
	@$array = ();
}

# The main function to read a configuration file:

sub read_cfg_file {
	my ($file) = @_;
	$file = abs_path($file);
	unless(-f $file) {
		&verbose("skipping config file $file (not a file)");
		return
	}
	&verbose("reading config file $file");
	package CFG;
	our $root = $::root;
	our @cut;
	our @cutre;
	our @cutexceptions;
	our @follow;
	our @symlinks;
	unless(my $return = do($file)) {
		die "error parsing $file: $@\nstopped" if($@);
		die "error running $file\nstopped"
			if(defined($return) && !$return)
	}
}

# The main function to read a configuration directory:

sub read_cfg_dir {
	my ($dir) = @_;
	$dir = abs_path($dir);
	unless(-d $dir) {
		&verbose("skipping config dir: $dir (not a directory)");
		return
	}
	&verbose("reading config dir: $dir");
	my @cfgs;
	find({
		no_chdir => 1,
		follow => 1,
		follow_skip => 2,
		dangling_symlinks => '',
		wanted => sub {
			push(@cfgs, $_) if(/\.pl$/ && (-f $_))
		}}, ($dir));
	for my $i (sort(@cfgs)) {
		&read_cfg_file($i)
	}
}

# The main function to read the configuration files:

sub read_cfg {
	for my $file (@configs) {
		my $two = substr($file, 0, 2);
		if($two eq '$/') {
			&read_cfg_file($root . substr($file, 1))
		} elsif ($two eq '~/') {
			&read_cfg_file($home . substr($file, 1))
		} elsif ($two eq '$$') {
			&read_cfg_dir($root . substr($file, 2))
		} elsif ($two eq '//') {
			&read_cfg_dir(substr($file, 2))
		}
	}
}

# The main function to process the database tree:

sub wanted_skip {
	return unless(/\/CONTENTS$/);
	open(my $content, '<', $_) or return;
	while(<$content>) {
		chomp;
		my $type = substr($_, 0, 3);
		my $path = substr($_, 4);
		if($type eq 'obj') {
			$path =~ s/\s+\S+\s+\S+$//
		} elsif($type eq 'sym') {
			$path =~ s/\s+\-\>\s+.*$//
		} elsif($type ne 'dir') {
			next
		}
		$path = &normalized($path);
		$skip{$path} = undef;
		for my $i (@symlinks) {
			my $length = 0;
			my $last = scalar(@$i) - 1;
			for(my $j = 0; $j < $last; ++$j) {
				my $s = $i->[$j];
				my $l = length($s);
				$length = $l if(($length <= $l) &&
					((($s . '/') eq substr($path, 0, $l + 1))
					|| ($s eq $path)))
			}
			next if($length == 0);
			my $rest = substr($path, $length);
			if((substr($rest, 0, 1) eq '/') || ($rest eq '')) {
				$skip{$i->[$last] . $rest} = undef
			}
		}
	}
	close($content)
}

# Recursively process the database tree

sub fill_skip {
	&verbose('Determining files owned by portage');
	find({
		no_chdir => 1,
		wanted => \&wanted_skip
		}, ($root . '/var/db/pkg'))
}

# Args: \$string, \@array_of_regexp
# Returns whether $string matches a regexp

sub match_array {
	my ($string, $array) = @_;
	for my $i (@$array) {
		return 1 if($$string =~ $i);
	}
	return ''
}

# The main function to process the file tree:

sub wanted_files {
	my $path = CFG::remove_root($_);
	return if(($path eq '') or ($path eq $rootdir));
	if(exists($cut{$path}) || &match_array(\$path, \@cutre)) {
		unless(&match_array(\$path, \@cutexceptions)) {
			$File::Find::prune = 1;
			return
		}
	}
	if(-l $_) {
		$File::Find::prune = 1 unless(exists($follow{$path}))
	}
	return if(exists($skip{$path}));
	$skip{$path} = undef;
	if(defined($fh)) {
		print($fh $path, "\n")
	} else {
		print($path, "\n")
	}
}

# Recursively process the file tree for all entries in passed array reference

sub process_dirs {
	my ($dirs) = @_;
	&verbose("Processing file tree\n");
	find({
		no_chdir => 1,
		follow_fast => 1,
		follow_skip => 2,
		dangling_symlinks => '',
		wanted => \&wanted_files
		}, @$dirs)
}
