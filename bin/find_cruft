#!/usr/bin/env perl

use strict;
use warnings;
use File::Find ();
use Getopt::Long ();
use Pod::Usage   ();
use File::Spec   ();
use Cwd          ();
use File::Path   qw(remove_tree);

# -------------------------------
# Static variables
# -------------------------------

my $name    = 'find_cruft';
my $VERSION = '1.0';
my $rootdir = File::Spec->rootdir();

# -------------------------------
# Global variables
# -------------------------------

my $fh       = undef;
my $delete   = 0;
my $verbose  = 0;
my $outputfile = '';
my $openmode   = '>>';
my $root       = '';
my %skip       = ();

# Files or directories we always ignore:
my @ignore_list = (
    "/etc/group",
    "/etc/group-",
    "/etc/gshadow",
    "/etc/gshadow-",
    "/etc/ld.so.cache",
    "/etc/passwd",
    "/etc/passwd-",
    "/etc/portage/make.conf",
    "/etc/shadow",
    "/etc/shadow-",
    "/usr/lib/modules/",
    "/var/cache/binpkgs/",
    "/var/cache/distfiles/",
    "/etc/config-archive/"
);

# -------------------------------
# Parse Options
# -------------------------------

Getopt::Long::Configure(qw(gnu_getopt no_ignore_case));
Getopt::Long::GetOptions(
    'help|h'       => sub { pod2usage(0) },
    'man|?'        => sub { pod2usage( -verbose => 2, -exit => 0 ) },
    'version|V'    => \&version,
    'verbose|v+'   => \$verbose,
    'delete|d'     => \$delete,
    'output|o=s'   => sub { $outputfile = $_[1]; $openmode = '>>'; },
    'Output|O=s'   => sub { $outputfile = $_[1]; $openmode = '>'; },
    'root|r=s'     => \$root,
) or pod2usage(2);

# We need at least one path argument:
pod2usage(2) unless @ARGV;

# -------------------------------
# Handle user-specified root
# -------------------------------
if ( $root ne '' ) {
    $root = Cwd::abs_path($root);
    $root =~ s{/$}{};
}

# Convert each path argument to absolute form under $root (if set)
foreach my $dir (@ARGV) {
    if ( $dir =~ m{^/} ) {
        $dir = $root . $dir unless $root eq '';
    }
    $dir = Cwd::abs_path($dir);
    fatal("$dir is not a directory") unless -d $dir;
}

# -------------------------------
# Possibly open an output file
# -------------------------------
if ($outputfile) {
    open( $fh, $openmode, $outputfile )
      or fatal( "Cannot open $openmode$outputfile:", $! );
}

verbose("Root: $root", 1);
verbose( [ 'ARGV', \@ARGV ], 1 );

# -------------------------------
# Mark Portage-owned files to skip
# -------------------------------
fill_skip();

# -------------------------------
# Process filesystem
# -------------------------------
process_dirs(\@ARGV);

# Close output file if opened
close $fh if $fh;

# -------------------------------
# Subroutines
# -------------------------------

sub version {
    print("$name $VERSION\n");
    exit 0;
}

sub pod2usage {
    require Pod::Usage;
    Pod::Usage::pod2usage(@_);
}

sub fatal {
    my @msgs = @_;
    warn("$name: fatal: @msgs\n");
    exit 1;
}

# Print verbose messages to stderr (or filehandle if --output)
sub verbose {
    # Only print if $verbose is high enough
    my ($msg, $level) = ( $_[0], $_[1] // 0 );
    return if $verbose < $level;

    if (ref $msg eq 'ARRAY') {
        # e.g. [ "Title", \@stuff ]
        my ($title, $ref) = @$msg;
        return unless @$ref;
        verbose("@$title:", $level);
        foreach my $val (@$ref) {
            if (ref($val) eq 'ARRAY') {
                verbose("[" . join(", ", @$val) . "]", $level);
            } else {
                verbose($val, $level);
            }
        }
        verbose("", $level);
    }
    else {
        # Just a string
        if ($fh) {
            print $fh "$msg\n";
        }
        else {
            warn "$msg\n";
        }
    }
}

# Return path with $root stripped off front
sub remove_root {
    my ($abs_path) = @_;
    return '' unless defined $abs_path;
    $abs_path =~ s{^\Q$root\E}{''} if $root ne '';
    return $abs_path;
}

# Mark portage-owned files so we skip them
sub fill_skip {
    # /var/db/pkg typically contains entries for installed packages
    # Each package has a CONTENTS file listing installed files
    verbose("Determining files owned by portage", 1);

    my $dbpkg = ($root eq '') ? '/var/db/pkg' : "$root/var/db/pkg";
    return unless -d $dbpkg;

    File::Find::find(
        {
            no_chdir => 1,
            wanted   => \&wanted_skip
        },
        $dbpkg
    );
}

sub wanted_skip {
    return unless (m{/CONTENTS$} && open(my $content, '<', $_));
    while (<$content>) {
        chomp;
        next if length($_) < 4;
        my $type = substr($_, 0, 3);
        my $path = substr($_, 4);

        # For 'obj' lines, remove checksums if present
        if ($type eq 'obj') {
            $path =~ s{\s+\S+\s+\S+$}{};
        }
        elsif ($type eq 'sym') {
            # Remove the " -> actual_target" part
            $path =~ s{\s+\-\>.*$}{};
        }
        elsif ($type ne 'dir') {
            next;
        }

        my $norm = normalized($path);
        $skip{$norm} = 1;
    }
    close $content;
}

# Convert path to canonical form, but keep rootdir for empty
sub normalized {
    my ($p) = @_;
    my $res = File::Spec->canonpath($p);
    return $res eq '' ? $rootdir : $res;
}

# Return true if path is in @ignore_list
sub is_ignored {
    my ($path) = @_;
    foreach my $ignore (@ignore_list) {
        # If ignore entry ends with "/", treat it as a prefix
        if ($ignore =~ m{/$}) {
            return 1 if $path =~ m{^\Q$ignore\E};
        }
        else {
            return 1 if $path eq $ignore;
        }
    }
    return 0;
}

# Recursively walk directories and act on files
sub process_dirs {
    my ($dirs) = @_;
    verbose("", 1);
    verbose("Processing file tree", 1);

    no warnings 'File::Find';
    File::Find::find(
        {
            no_chdir          => 1,
            follow_fast       => 1,
            follow_skip       => 2,
            dangling_symlinks => '',
            wanted            => \&wanted_files
        },
        @$dirs
    );
}

# Called by File::Find for each item
sub wanted_files {
    # Remove leading $root from absolute path
    my $path = remove_root($File::Find::name);

    # Skip root or empty path
    return if !$path || $path eq '/' || $path eq $rootdir;

    # Possibly ignore certain system files
    return if is_ignored($path);

    # Skip items Portage says it owns
    return if $skip{ normalized($File::Find::name) };

    # If --delete, remove them
    if ($delete) {
        if (-f $_ || -l $_) {
            unlink($_) or warn "Failed to delete $path: $!\n";
        }
        elsif (-d $_) {
            my $count = remove_tree($_, { safe => 0 });
            if ($count == 0) {
                warn "Failed to delete directory $path (permissions or not empty?)\n";
            }
            $File::Find::prune = 1;  # Don't recurse into a removed directory
        }
        else {
            warn "Unsupported file type: $path\n";
        }
    }
    else {
        # Otherwise just list them
        if ($fh) {
            print $fh "$path\n";
        }
        else {
            print "$path\n";
        }
    }
}

__END__

=head1 NAME

find_cruft - Find (and optionally delete) unowned files on a Gentoo system

=head1 SYNOPSIS

  find_cruft [options] [paths]

Options:

  -h, --help           display brief help
  -?, --man            display full manual
  -V, --version        display version
  -v, --verbose        increase verbosity
  -d, --delete         delete any discovered 'cruft'
  -o, --output FILE    append output to FILE
  -O, --Output FILE    overwrite FILE
  -r, --root DIR       set custom root (prefix)

=head1 DESCRIPTION

By default, this script lists files that are believed to be unowned by
the system package manager (Portage). Passing C<--delete> will remove them
(recursively, in the case of directories). Use with caution.

=cut
